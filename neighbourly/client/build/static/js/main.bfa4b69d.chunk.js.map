{"version":3,"sources":["givingHelp.png","gettingHelp.png","logo.png","react-components/Header/Header.js","actions/posts.js","react-components/Post/Post.js","react-components/BaseReactComponent/index.js","react-components/PostList/PostList.js","actions/user.js","react-components/Login/LoginForm.js","react-components/Login/SignupForm.js","react-components/Login/LoginReg.js","react-components/Home/Home.js","react-components/PostForm/PostForm.js","react-components/AddPost/AddPost.js","react-components/UserRow/UserRow.js","actions/reports.js","react-components/OneReport/OneReport.js","react-components/UserTable/UserTable.js","actions/comments.js","react-components/Comment/Comment.js","react-components/CommentList/CommentList.js","react-components/Comments/Comments.js","react-components/CommentForm/CommentForm.js","react-components/AddComment/AddComment.js","react-components/YourPost/YourPost.js","react-components/YourPostList/YourPostList.js","react-components/UserInformation/UserInformation.js","react-components/ReportForm/ReportForm.js","react-components/Report/Report.js","App.js","serviceWorker.js","actions/helpers.js","index.js"],"names":["module","exports","Header","this","props","title","subtitle","class","React","Component","getPosts","fetch","then","res","status","json","alert","setState","posts","catch","error","console","log","updatePostForm","field","name","value","addPost","post","getState","request","Request","method","body","JSON","stringify","headers","Accept","posterName","posterLocation","postTitle","postDifficulty","taskDate","jobDescription","type","Post","validPost","filters","location","String","trim","state","seconds","_id","to","pathname","comments","postID","postNum","onClick","url","concat","deletePost","BaseReactComponent","_subscription","subscribe","filterState","bind","filteredState","isPlainObject","Error","unsubscribe","PostList","sortByDifficulty","sortedPosts","sort","p1","p2","sortByPosterName","newPosts","map","key","uid","readCookie","currentUser","updateLoginForm","updateSignupForm","register","password","confirmPassword","ourBody","userName","phone","helped","gottenHelped","isAdmin","window","login","undefined","username","Login","loginForm","placeholder","autoFocus","onChange","e","target","Signup","signupForm","aria-describedby","LoginReg","showSignIn","targetForm","disabled","trigger","modal","closeOnDocumentClick","closeOnEscape","overlayStyle","background","transition","contentStyle","backgroundImage","border","boxShadow","displaySignIn","displayRegister","Home","filterPosts","newFilters","getFilters","types","sorts","Array","from","document","getElementsByClassName","length","filter","checkBox","checked","locations","chosenTypes","userhelp","userhelped","className","alt","logo","src","givingHelp","gettingHelp","defaultChecked","PostForm","postForm","AddPost","id","UserRow","ratio","row","updateReportForm","addReport","report","reporterName","postNumber","complaint","OneReport","reportID","reports","deleteReport","UserTable","users","removeReport","updateCommentForm","Comment","comment","removeComment","adminLoggedIn","date","commentID","deleteComment","CommentList","Comments","i","getPostComments","CommentForm","commentForm","addComment","AddComment","YourPost","YourPostList","UserInformation","userPosts","adminStatus","j","push","ReportForm","reportForm","Report","App","exact","path","render","component","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfa4b69d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/givingHelp.67f687f8.png\";","module.exports = __webpack_public_path__ + \"static/media/gettingHelp.168a04ee.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.82e885f8.png\";","import React from 'react';\r\nimport \"./Header.css\";\r\n\r\n/* The Header Component */\r\nclass Header extends React.Component {\r\n    render() {\r\n        const { title, subtitle } = this.props\r\n\r\n        return (\r\n            <div class=\"HeaderItem\">\r\n                <h1 class=\"HeaderItem\">{title}</h1>\r\n                <h5 class=\"HeaderItem\">{subtitle}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import { getState, setState } from \"statezero\";\r\n\r\n// A function to send a GET request to the web server,\r\n//  and then loop through them and add a list element for each student.\r\nexport const getPosts = () => {\r\n    // the URL for the request\r\n    const url = \"/posts\";\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    fetch(url)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not get students\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            setState(\"posts\", json.posts);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\n\r\nexport const deletePost = (postID) => {\r\n    // the URL for the request\r\n    const url = \"/posts/\".concat(postID);\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    // Same thing, change http method\r\n    fetch(url, {method: \"delete\"})\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not delete students\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            console.log(\"after\", json.posts)\r\n            setState(\"posts\", json.posts);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\n\r\nexport const updatePostForm = field => {\r\n    const { name, value } = field;\r\n    setState(`postForm.${name}`, value);\r\n};\r\n\r\nexport const addPost = () => {\r\n    // the URL for the request\r\n    const url = \"/posts\";\r\n\r\n    // The data we are going to send in our request\r\n    const post = getState(\"postForm\");\r\n\r\n    // Create our request constructor with all the parameters we need\r\n    const request = new Request(url, {\r\n        method: \"post\",\r\n        body: JSON.stringify(post),\r\n        headers: {\r\n            Accept: \"application/json, text/plain, */*\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    // Send the request with fetch()\r\n    fetch(request)\r\n        .then(function(res) {\r\n            // Handle response we get from the API.\r\n            // Usually check the error codes to see what happened.\r\n            setState(\"postForm\", { posterName: \"\", posterLocation: \"\", postTitle: \"\", postDifficulty: \"\", taskDate: \"\", jobDescription: \"\" });\r\n            if (res.status === 200) {\r\n                // If student was added successfully, tell the user.\r\n                setState(\"message\", {\r\n                    body: \"Success: Added a Post.\",\r\n                    type: \"success\"\r\n                });\r\n            } else {\r\n                // If server couldn't add the student, tell the user.\r\n                // Here we are adding a generic message, but you could be more specific in your app.\r\n                setState(\"message\", {\r\n                    body: \"Error: Could not add Post.\",\r\n                    type: \"error\"\r\n                });\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};","import React from 'react';\r\nimport \"./Post.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport { getState } from \"statezero\";\r\nimport { deletePost } from \"../../actions/posts\"\r\n\r\n\r\nclass Post extends React.Component {\r\n    /*  Common 'Lifecycle' methods \r\n        - constructor\r\n        - componentDidMount\r\n        - componentWillUnmount\r\n    */\r\n\r\n    constructor(props) { // When the componenet is created\r\n        super(props)\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    validPost = (post, filters) => {\r\n        // Checks if the given post is a valid post based on the filters selected.\r\n        if (filters.location != null && filters.location != \"Anywhere\" &&\r\n            String(post.posterLocation).trim() !== String(filters.location).trim()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { post, filters } = this.props\r\n        console.log(post._id)\r\n        if (this.validPost(post, filters)) {\r\n            if (!getState(\"adminLoggedIn\")) {\r\n                return (\r\n                    <li>\r\n                        {/*Our post div*/}\r\n                        <div class=\"postMain\" >\r\n                            {/* Header for the post */}\r\n                            <div class=\"postTitle\">{post.postTitle}</div>\r\n                            <div class=\"postDifficulty\">{post.postDifficulty} / 5</div>\r\n                            {/* Content of the post */}\r\n                            <div class=\"postContent\">\r\n                                {post.jobDescription}\r\n                            </div>\r\n                            {/* Information of the poster/post. */}\r\n                            <ul class=\"postInfoList\">\r\n                                <li class=\"postInfoItem\">{post.posterName}</li>\r\n                                <li class=\"postInfoItem\">{post.posterLocation}</li>\r\n                                <li class=\"postInfoItem\">{post.taskDate}</li>\r\n                            </ul>\r\n                            <div class=\"buttonSection\">\r\n                                {/* NOT DONE, need to pass in posts properly */}\r\n                                <Link to={\r\n                                    {\r\n                                        pathname: './Comments', state: {\r\n                                            post: post, postTitle: post.postTitle, postDifficulty: post.postDifficulty, jobDescription: post.jobDescription,\r\n                                            posterName: post.posterName,\r\n                                            posterLocation: post.posterLocation, taskDate: post.taskDate, comments: post.comments,\r\n                                            postID: post._id\r\n                                        }\r\n                                    }}\r\n                                > { /* This element will link the URL path to /queue */}\r\n\r\n                                    <button class=\"generalButton\">\r\n                                        Comments\r\n                                        </button>\r\n                                </Link>\r\n\r\n                                <Link to={{ pathname: './Report', state: { postNum: post._id } }}>\r\n                                    <button class=\"generalButton\">Report\r\n                                    </button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            } else {\r\n                return (\r\n                    <li>\r\n                        {/*Our post div*/}\r\n                        <div class=\"postMain\" >\r\n                            {/* Header for the post */}\r\n                            <div class=\"postTitle\">{post.postTitle}</div>\r\n                            <div class=\"postDifficulty\">{post.postDifficulty} / 5</div>\r\n                            {/* Content of the post */}\r\n                            <div class=\"postContent\">\r\n                                {post.jobDescription}\r\n                            </div>\r\n                            {/* Information of the poster/post. */}\r\n                            <ul class=\"postInfoList\">\r\n                                <li class=\"postInfoItem\">{post.posterName}</li>\r\n                                <li class=\"postInfoItem\">{post.posterLocation}</li>\r\n                                <li class=\"postInfoItem\">{post.taskDate}</li>\r\n                            </ul>\r\n                            {/* Delete button if the user has access. */}\r\n                            <div class=\"buttonSection\">\r\n\r\n                                <Link to={\r\n                                    {\r\n                                        pathname: './Comments', state: {\r\n                                            post: post, postTitle: post.postTitle, postDifficulty: post.postDifficulty, jobDescription: post.jobDescription,\r\n                                            posterName: post.posterName,\r\n                                            posterLocation: post.posterLocation, taskDate: post.taskDate, comments: post.comments,\r\n                                            postID: post._id\r\n                                        }\r\n                                    }}\r\n                                > { /* This element will link the URL path to /queue */}\r\n                                    <button class=\"generalButton\">\r\n                                        Comments\r\n                                    </button>\r\n                                </Link>\r\n\r\n                                <Link to={{ pathname: './Report', state: { postNum: post._id } }}>\r\n                                    <button class=\"generalButton\">Report\r\n                                    </button>\r\n                                </Link>\r\n                                <button class=\"generalButton\" onClick={() => { deletePost(post._id) }}>Delete\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            }\r\n        } else {\r\n            return (null);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Post;\r\n","import { isPlainObject } from \"lodash-es\";\r\nimport React from \"react\";\r\nimport { getState, subscribe, unsubscribe } from \"statezero\";\r\n\r\nclass BaseReactComponent extends React.Component {\r\n    componentWillMount() {\r\n        const callback = state => {\r\n            this.setState(state);\r\n        };\r\n        this._subscription = subscribe(callback, this.filterState.bind(this));\r\n        const filteredState = this.filterState(getState());\r\n        if (!isPlainObject(filteredState)) {\r\n            throw new Error(\"The result of filterState() must be an object\");\r\n        }\r\n        this.setState(filteredState);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        unsubscribe(this._subscription);\r\n    }\r\n\r\n    filterState() {\r\n        // Sub-classes must override this method.\r\n        throw new Error(\"filterState() is not implemented\");\r\n    }\r\n}\r\n\r\nexport default BaseReactComponent;","import React from 'react';\r\nimport { uid } from 'react-uid';\r\nimport \"./PostList.css\";\r\nimport Post from '../Post/Post'\r\n\r\n// New code\r\nimport { getPosts } from \"../../actions/posts\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n/* Component for the List of Students */\r\nclass PostList extends BaseReactComponent {\r\n    // New code\r\n    filterState({ posts }) {\r\n        return { posts };\r\n    }\r\n\r\n    sortByDifficulty = (posts) => {\r\n        // Returns the posts sorted by difficulty.\r\n        const sortedPosts = posts.concat();\r\n        sortedPosts.sort((p1, p2) => {\r\n            if (p1.postDifficulty < p2.postDifficulty) {\r\n                return -1;\r\n            } else if (p1.postDifficulty > p2.postDifficulty) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        return sortedPosts\r\n    }\r\n\r\n    sortByPosterName = (posts) => {\r\n        // Returns the posts sorted by the poster names.\r\n        const sortedPosts = posts.concat();\r\n        sortedPosts.sort((p1, p2) => {\r\n            if (p1.posterName < p2.posterName) {\r\n                return -1;\r\n            } else if (p1.posterName > p2.posterName) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        return sortedPosts\r\n    }\r\n\r\n    render() {\r\n        let { filters } = this.props\r\n\r\n        // New code\r\n        const { posts } = this.state\r\n        // Get our posts from the server\r\n        getPosts()\r\n\r\n        // Sorts the posts by the given sorting method (or just leaves it as is).\r\n        let newPosts = posts.concat();\r\n        if (filters.sort != null && filters.sort === \"Difficulty\") {\r\n            newPosts = this.sortByDifficulty(posts);\r\n        } else if (filters.sort != null && filters.sort === \"Poster Name\") {\r\n            newPosts = this.sortByPosterName(posts);\r\n        }\r\n\r\n        /* Our student list.  We use the state to iterate through the \r\n           student list and make an <li> for each one. */\r\n        return (\r\n            <ul class=\"postList\">\r\n                {/* .MAP creates as problem as it generates a new post array, so our original post array will never be edited */}\r\n                {newPosts.map((post) => {\r\n                    return (\r\n                        <Post key={uid(post) /* unique id required to help React render more efficiently when we delete students. */}\r\n                            post={post}\r\n                            filters={filters} />\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostList;","// getState is used to get the value of a state path\r\n// setState is used to set the value of a state path\r\nimport { getState, setState } from \"statezero\";\r\nimport { get } from \"https\";\r\n\r\nexport const getUsers = () => {\r\n    // the URL for the request\r\n    const url = \"/users\";\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    fetch(url)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not get students\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            setState(\"users\", json.users);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\n\r\nexport const readCookie = () => {\r\n    const url = \"/users/check-session\";\r\n\r\n    fetch(url)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                return res.json();\r\n            }\r\n        })\r\n        .then(json => {\r\n            if (json && json.currentUser) {\r\n                setState(\"currentUser\", json.currentUser);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const updateLoginForm = field => {\r\n    const { name, value } = field;\r\n    setState(`loginForm.${name}`, value);\r\n};\r\n\r\n\r\nexport const updateSignupForm = field => {\r\n    const { name, value } = field;\r\n    setState(`signupForm.${name}`, value);\r\n};\r\n\r\n\r\nexport const register = () => {\r\n\r\n    if (getState(\"signupForm\").password == getState(\"signupForm\").confirmPassword){\r\n        const ourBody = {\r\n            userName: getState(\"signupForm\").userName,\r\n            password: getState(\"signupForm\").password,\r\n            name: getState(\"signupForm\").name,\r\n            location: getState(\"signupForm\").location,\r\n            phone: getState(\"signupForm\").phone,\r\n            helped: 0,\r\n            gottenHelped: 0,\r\n            isAdmin: false\r\n        }\r\n        \r\n        // Create our request constructor with all the parameters we need\r\n        const request = new Request(\"/users\", {\r\n            method: \"post\",\r\n            body: JSON.stringify(ourBody),\r\n            headers: {\r\n                Accept: \"application/json, text/plain, */*\",\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n    \r\n        // Send the request with fetch()\r\n        fetch(request)\r\n        .then(function(res) {\r\n            // Handle response we get from the API.\r\n            // Usually check the error codes to see what happened.\r\n            setState(\"signupForm\", {name: \"\", userName: \"\", password: \"\", confirmPassword: \"\", location: \"\", phone: \"\"})\r\n            if (res.status === 200) {\r\n                window.alert(\"Registered Succesfully!  Please log in to confirm!\")\r\n                // If student was added successfully, tell the user.\r\n                setState(\"message\", {\r\n                    body: \"Success: Added a User.\",\r\n                    type: \"success\"\r\n                });\r\n            } else {\r\n                // If server couldn't add the student, tell the user.\r\n                // Here we are adding a generic message, but you could be more specific in your app.\r\n                setState(\"message\", {\r\n                    body: \"Error: Could not add User.\",\r\n                    type: \"error\"\r\n                });\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }else{\r\n        window.alert(\"Could not register! Passwords do not match.\")\r\n    }\r\n   \r\n};\r\n\r\nexport const login = () => {\r\n    // Create our request constructor with all the parameters we need\r\n    const request = new Request(\"/users/login\", {\r\n        method: \"post\",\r\n        body: JSON.stringify(getState(\"loginForm\")),\r\n        headers: {\r\n            Accept: \"application/json, text/plain, */*\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    // Send the request with fetch()\r\n    fetch(request)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // Probably want to set admin logged in\r\n                return res.json();\r\n            }\r\n        })\r\n        .then(json => {\r\n            // TO DO: SET IS ADMIN BASED ON THIS INFORMATION, all works\r\n            if (json.currentUser !== undefined) {\r\n                setState(\"loginForm\", {username: \"\", password: \"\" });\r\n                setState(\"currentUser\", json.currentUser);\r\n                if (json.currentUser.isAdmin){\r\n                    setState(\"adminLoggedIn\", true)\r\n                }\r\n                setState(\"disabled\", true)\r\n                setState(\"someoneLoggedIn\", true)\r\n                window.alert(\"Logged in Sucessfully\")\r\n            }\r\n        })\r\n        .catch(error => {\r\n            window.alert(\"Could not log in!  Wrong username or password!\")\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const logout = () => {\r\n    const url = \"/users/logout\";\r\n\r\n    fetch(url)\r\n        .then(res => {\r\n            if (getState(\"someoneLoggedIn\")){\r\n                setState(\"currentUser\", null);\r\n                setState(\"someoneLoggedIn\", false)\r\n                setState(\"adminLoggedIn\", false)\r\n                setState(\"disabled\", false)\r\n                window.alert(\"Logged out succesfully!\")\r\n            }else{\r\n                window.alert(\"Not logged in!\")\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};","import React, { Component } from \"react\";\r\nimport \"./Login.css\";\r\n\r\nimport {login, updateLoginForm} from \"../../actions/user\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\nexport default class Login extends BaseReactComponent {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    //NEW LOGIN STUFF BELOW\r\n\r\n    filterState({ loginForm}) {\r\n        return { loginForm };\r\n    }\r\n\r\n    render() {\r\n        const { loginForm } = this.state;\r\n\r\n        const { username, password } = loginForm;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <input class=\"inputTextBox\"\r\n                        value={username}\r\n                        placeholder=\"Enter your username...\"\r\n                        autoFocus\r\n                        type=\"username\"\r\n                        name=\"username\"\r\n                        onChange={e => updateLoginForm(e.target)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <input class=\"inputTextBox\"\r\n                        value={password}\r\n                        placeholder=\"Enter your password...\"\r\n                        onChange={e => updateLoginForm(e.target)}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                    />\r\n                </div>\r\n                <button class=\"submitButton\" type=\"submit\" onClick={login}>\r\n                    Login\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Login.css\";\r\n\r\nimport {register, updateSignupForm} from \"../../actions/user\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\nexport default class Signup extends BaseReactComponent {\r\n    filterState({ signupForm}) {\r\n        return { signupForm };\r\n    }\r\n\r\n    render() {\r\n        const { signupForm } = this.state;\r\n\r\n        const { name, userName, password, confirmPassword, location, phone } = signupForm;\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div class=\"inputTextGroup\">\r\n                    <input class=\"inputTextBox\" name=\"name\" value={name} autoFocus type=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter your name...\" onChange={e => updateSignupForm(e.target)}></input>\r\n                    <input class=\"inputTextBox\" name=\"userName\" value={userName} autoFocus type=\"username\" placeholder=\"Enter your username...\" onChange={e => updateSignupForm(e.target)}></input>\r\n\r\n                </div>\r\n                <div class=\"inputTextGroup\">\r\n                    <input class=\"inputTextBox\" name=\"password\" value={password} type=\"password\" autoFocus onChange={e => updateSignupForm(e.target)} placeholder=\"Enter as password...\"></input>\r\n                    <input class=\"inputTextBox\" name=\"confirmPassword\" value={confirmPassword} type=\"password\" onChange={e => updateSignupForm(e.target)} placeholder=\"Re-enter the password...\"></input>\r\n\r\n                </div>\r\n                <div class=\"inputTextGroup\">\r\n                    <input class=\"inputTextBox\" name=\"phone\" value={phone} type=\"phone\"  autoFocus onChange={e => updateSignupForm(e.target)} placeholder=\"Enter your phone number...\"></input>\r\n                    <input class=\"inputTextBox\" name=\"location\" value={location} type=\"locaton\" autoFocus onChange={e => updateSignupForm(e.target)} placeholder=\"Enter your location...\"></input>\r\n                </div>\r\n                <button class=\"submitButton\" type=\"submit\" onClick={register}>Submit </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport Login from \"./LoginForm\";\r\nimport Signup from './SignupForm'\r\nimport \"./Login.css\";\r\n\r\nimport { getState } from \"statezero\";\r\n\r\n\r\n\r\n\r\nclass LoginReg extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showSignIn: true, // by default this is true\r\n        };\r\n    }\r\n\r\n    displaySignIn() {\r\n        this.setState({\r\n            showSignIn: true\r\n\r\n        });\r\n    }\r\n\r\n    displayRegister() {\r\n        this.setState({\r\n            showSignIn: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const showSignIn = this.state.showSignIn;\r\n\r\n        let targetForm;\r\n        if (showSignIn) {\r\n            targetForm = <Login ></Login>;\r\n        } else {\r\n            targetForm = <Signup></Signup>;\r\n        }\r\n\r\n        // NOTE: We are aware that inline styling is not good practice.\r\n        //       However, we cannot style the imported Popup using the external way\r\n        //       as giving it a class name is less in priority than the inline styles the import creates.\r\n        //       Hence we are forced to resort to inline styling for this particular component.\r\n        const modalStyling = {\r\n            backgroundImage: \"linear-gradient(to bottom, rgb(179, 230, 204), rgb(255, 206, 217))\",\r\n            border: \"2px solid darkgray\",\r\n            boxShadow: \"inset 0 2px 2px 0 rgba(0,0,0,0.2), 0 2px 2px 0 rgba(0,0,0,0.19)\"\r\n        }\r\n        const outsideStyling = {\r\n            background: \"rgba(199, 84, 136, 0.2)\",\r\n            transition: \"0.8s\"\r\n        }\r\n        return (\r\n            <Popup disabled={getState(\"disabled\")} trigger={<button class=\"loginRegModalButton\">Log in/Register </button>}\r\n                modal\r\n                closeOnDocumentClick\r\n                closeOnEscape\r\n                class=\"loginPopup\"\r\n                overlayStyle={outsideStyling}\r\n                contentStyle={modalStyling}\r\n            >\r\n                <div class=\"loginRegButtonGroup\">\r\n                    <button class=\"loginRegButton\" onClick={() => this.displaySignIn()}>Log in...</button>\r\n                    <button class=\"loginRegButton\" onClick={() => this.displayRegister()}>Sign up...</button>\r\n                </div>\r\n                {targetForm}\r\n            </Popup>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default LoginReg;\r\n","/*  Full Queue component */\r\n// Everything here was previously in the App component.\r\nimport React from 'react';\r\n\r\n// Importing components\r\nimport Header from '../Header/Header';\r\nimport PostList from '../PostList/PostList';\r\nimport { Link } from 'react-router-dom';\r\nimport LoginReg from '../Login/LoginReg';\r\nimport logo from '../../logo.png';\r\nimport givingHelp from '../../givingHelp.png';\r\nimport gettingHelp from '../../gettingHelp.png';\r\nimport \"./Home.css\";\r\nimport \"./Filtering.css\";\r\nimport \"../UserInformation/Profile.css\";\r\nimport \"../Login/Login.css\";\r\n\r\nimport { getState } from \"statezero\";\r\nimport { logout } from \"../../actions/user\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\nclass Home extends BaseReactComponent {\r\n\r\n    ///  React 'state'.  \r\n    // Allows us to keep track of changing data in this component.\r\n\r\n    // Generic handler for whenever we type in an input box.\r\n    // We change the state for the particular property bound to the textbox from the event.\r\n    filterPosts = () => {\r\n        // Filters are of the form, {property: [value1, or value2, ... ]}\r\n        // Gets the new filters inputed and updates the posts.\r\n        const newFilters = this.getFilters();\r\n        this.setState({\r\n            filters: newFilters\r\n        })\r\n    }\r\n\r\n    getFilters() {\r\n        const filters = { // Blank filter structure\r\n            types: [],\r\n            location: null,\r\n            sort: null,\r\n        }\r\n        // Get the sorting method selected.\r\n        const sorts = Array.from(document.getElementsByClassName(\"sortType\"));\r\n        if (sorts.length === 0) {\r\n            return filters;\r\n        }\r\n        filters.sort = sorts.filter(checkBox => checkBox.checked)[0].value;\r\n\r\n        // Get the location selected.\r\n        const locations = Array.from(document.getElementsByClassName(\"locationType\"));\r\n        filters.location = locations.filter(checkBox => checkBox.checked)[0].value;\r\n\r\n        // Get the item types selected.\r\n        const types = Array.from(document.getElementsByClassName(\"helpType\"));\r\n        const chosenTypes = types.filter(checkBox => checkBox.checked);\r\n        filters.types = chosenTypes.map(checkBox => checkBox.value);\r\n\r\n        return filters\r\n    }\r\n\r\n    // New code\r\n    filterState({ posts }) {\r\n        return { posts };\r\n    }\r\n\r\n    render() {\r\n        // SERVER DATA NEEDED:\r\n        // Get users from the server so we know whos logged in at the moment\r\n\r\n        let username = 'Not Logged In'\r\n        let userhelp = 0\r\n        let userhelped = 0\r\n\r\n        if (getState(\"someoneLoggedIn\")) {\r\n            username = getState(\"currentUser\").name\r\n            userhelp = getState(\"currentUser\").helped\r\n            userhelped = getState(\"currentUser\").gottenHelped\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                { /* Header component with text props. */}\r\n                <div class=\"mainBanner\">\r\n                    <img class=\"logo\" alt={logo} src={logo} />\r\n                    <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                    <div class=\"userInfoSection\">\r\n                        { /* Will bring you to a login/registration screen. */}\r\n                        <LoginReg \r\n                        />\r\n                        {/* Logs the user out*/}\r\n                        <button class=\"generalUserButton\" onClick={() => logout()}>Logout</button>\r\n\r\n                        {/* Links to the user's information TESTING CODE AT THE MOMENT */}\r\n                        <Link to={\r\n                            { pathname: './UserInformation' }}>\r\n                            <button class=\"generalUserButton\">\r\n                                My Info\r\n                            </button>\r\n                        </Link>\r\n\r\n                        {/* Skeleton for the user information.*/}\r\n                        <div class=\"profileInfoMain\">\r\n                            <span class=\"profileInfoName\">{username}</span>\r\n                            <span class=\"givingHelp bannerProfile\">\r\n                                <img class=\"helpPicture\" alt={givingHelp} src={givingHelp} />\r\n                                {userhelp} &nbsp;\r\n                            </span>\r\n                            <span class=\"gettingHelp bannerProfile\">\r\n                                <img class=\"helpPicture\" alt={gettingHelp} src={gettingHelp} />\r\n                                {userhelped}\r\n                            </span>\r\n                        </div>\r\n                        <img class=\"profileInfoPicture\" alt={logo} src={logo} />\r\n                    </div>\r\n                </div>\r\n\r\n                { /* Sub header component for posts. */}\r\n                <div class=\"subBannerLeft\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Posts</text></h3>\r\n\r\n                    <Link to={\r\n                        { pathname: './AddPost'}}\r\n                    > { /* This element will link the URL path to /queue */}\r\n                        <button class=\"subBannerButton\">\r\n                            Add Post\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                { /* Sub header component for filtering. */}\r\n                <div class=\"subBannerRight\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Filter Categories</text></h3>\r\n\r\n                    <Link to={\r\n                        { pathname: './UserTable' }}\r\n                    >\r\n                        <button class=\"subBannerButton\">\r\n                            Go To User List\r\n\t                    </button>\r\n                    </Link>\r\n                </div>\r\n                { /* The Post List */}\r\n                <div class=\"halfSection\">\r\n                    <PostList \r\n                        filters={this.getFilters()}\r\n                    />\r\n                </div>\r\n                {/* Filtering list and buttons */}\r\n                <div class=\"halfSection\">\r\n\r\n                    {/* NOTE: Although this could be extracted into a \r\n                    module, we don't know how to then get the checked \r\n                    filters from it so for the time being this stays here. */}\r\n                    <div class=\"filterSection\">\r\n                        <div class=\"filterDivision\">\r\n                            <div class=\"divisionName\"> What kind of help do you need?</div>\r\n                            <ul class=\"divisionCategories\">\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Any kind\" defaultChecked />\r\n                                    <span>Any kind</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Item\" />\r\n                                    <span>Item</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\" ><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Housework\" />\r\n                                    <span>Housework</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\" ><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Yardwork\" />\r\n                                    <span>Yardwork</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\" ><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Moving\" />\r\n                                    <span>Moving</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\" ><label>\r\n                                    <input class=\"helpType\" type=\"checkbox\" value=\"Volunteering\" />\r\n                                    <span>Volunteering</span>\r\n                                </label></div></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div class=\"filterDivision\">\r\n                            <div class=\"divisionName\"> Where do you need this help?</div>\r\n                            <ul class=\"divisionCategories\">\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"Anywhere\" name=\"location\" defaultChecked />\r\n                                    <span>Anywhere</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"GTA\" name=\"location\" />\r\n                                    <span>GTA</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"Regent Park\" name=\"location\" />\r\n                                    <span>Regent Park</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"Riverdale\" name=\"location\" />\r\n                                    <span>Riverdale</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"Greenwood\" name=\"location\" />\r\n                                    <span>Greenwood</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"locationType\" type=\"radio\" value=\"Don Mount\" name=\"location\" />\r\n                                    <span>Don Mount</span>\r\n                                </label></div></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div class=\"filterDivision\">\r\n                            <div class=\"divisionName\"> Sort posts by...</div>\r\n                            <ul class=\"divisionCategories\">\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"sortType\" type=\"radio\" value=\"Date\" name=\"sorting\" defaultChecked />\r\n                                    <span>Date</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"sortType\" type=\"radio\" value=\"Difficulty\" name=\"sorting\" />\r\n                                    <span>Difficulty</span>\r\n                                </label></div></li>\r\n                                <li><div class=\"categoryCheck\"><label>\r\n                                    <input class=\"sortType\" type=\"radio\" value=\"Poster Name\" name=\"sorting\" />\r\n                                    <span>Poster Name</span>\r\n                                </label></div></li>\r\n                            </ul>\r\n                        </div>\r\n                        <button class=\"commitFilterButton\" onClick={() => this.filterPosts()}> Filter Posts </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./PostForm.css\";\r\n\r\n// New code\r\nimport {addPost, updatePostForm} from \"../../actions/posts\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n/* Component for the Student Form */\r\nclass PostForm extends BaseReactComponent {\r\n     // this.state\r\n    filterState({ postForm}) {\r\n        return { postForm };\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { postForm } = this.state;\r\n\r\n        const { posterName, posterLocation, postTitle, postDifficulty, taskDate, jobDescription } = postForm;\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                { /* Inputs to add student */}\r\n                <input class=\"inputTextBox\"\r\n                    name='posterName'\r\n                    value={posterName}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='posterLocation'\r\n                    value={posterLocation}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Job Location\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='postTitle'\r\n                    value={postTitle}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Job Title\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='postDifficulty'\r\n                    value={postDifficulty}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Job Difficulty\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='taskDate'\r\n                    value={taskDate}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Completion date\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='jobDescription'\r\n                    value={jobDescription}\r\n                    onChange={e => updatePostForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Job Description (250 Chars. Max)\" />\r\n\r\n                <Link to={{ pathname: './' }}>\r\n                    <button class=\"submitButton add\" onClick={addPost}>\r\n                        Submit Post\r\n\t                </button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostForm;\r\n\r\n","/*  Full Queue component */\r\n// Everything here was previously in the App component.\r\nimport React from 'react';\r\n\r\n// Importing components\r\nimport Header from '../Header/Header';\r\nimport PostForm from '../PostForm/PostForm'\r\nimport { Link } from 'react-router-dom';\r\nimport \"../Home/Home.css\";\r\nimport logo from '../../logo.png';\r\n\r\nclass AddPost extends React.Component {\r\n\r\n    // Each section of the Queue now has its own componenet, cleaning up the\r\n    // JSX a lot.\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                { /* Header component with text props. */}\r\n                <div class=\"mainBanner\">\r\n                    <img class=\"logo\" alt={logo} src={logo} />\r\n                    <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                </div>\r\n\r\n                { /* Sub header component for posts. */}\r\n                <div id=\"addAPost\" class=\"subBannerLeft\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Add a Post</text></h3>\r\n                    <Link to={{ pathname: './'}}>\r\n                        { /* This element will link the URL path to home page */}\r\n                        <button class=\"subBannerButton\">\r\n                            Go Back\r\n            </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                { /* Form to enter all post information. */}\r\n                <PostForm\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPost;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class UserRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { row } = this.props\r\n        let ratio\r\n        if (row.gottenHelped === 0) {\r\n            ratio = row.helped\r\n        } else {\r\n            ratio = row.helped / row.gottenHelped\r\n        }\r\n        return (\r\n            <tr>\r\n                <td> {row.userName} </td>\r\n                <td> {row.location}</td>\r\n                <td> {ratio}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\n","import { getState, setState } from \"statezero\";\r\n\r\n// A function to send a GET request to the web server,\r\n//  and then loop through them and add a list element for each student.\r\nexport const getReports = () => {\r\n    // the URL for the request\r\n    const url = \"/reports\";\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    fetch(url)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not get Reports\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            setState(\"reports\", json.reports);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const updateReportForm = field => {\r\n    const { name, value } = field;\r\n    setState(`reportForm.${name}`, value);\r\n};\r\n\r\n\r\nexport const deleteReport = (reportID) => {\r\n    // the URL for the request\r\n    const url = \"/reports/\".concat(reportID);\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    // Same thing, change http method\r\n    fetch(url, {method: \"delete\"})\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not delete report\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            setState(\"reports\", json.reports);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const addReport = () => {\r\n    // the URL for the request\r\n    const url = \"/reports\";\r\n\r\n    // The data we are going to send in our request\r\n    const report = getState(\"reportForm\");\r\n\r\n    // Create our request constructor with all the parameters we need\r\n    const request = new Request(url, {\r\n        method: \"post\",\r\n        body: JSON.stringify(report),\r\n        headers: {\r\n            Accept: \"application/json, text/plain, */*\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    // Send the request with fetch()\r\n    fetch(request)\r\n        .then(function(res) {\r\n            // Handle response we get from the API.\r\n            // Usually check the error codes to see what happened.\r\n            setState(\"reportForm\", { reporterName: \"\", postNumber: \"\", complaint: \"\"});\r\n            if (res.status === 200) {\r\n                // If student was added successfully, tell the user.\r\n                setState(\"message\", {\r\n                    body: \"Success: Added a Report.\",\r\n                    type: \"success\"\r\n                });\r\n            } else {\r\n                // If server couldn't add the student, tell the user.\r\n                // Here we are adding a generic message, but you could be more specific in your app.\r\n                setState(\"message\", {\r\n                    body: \"Error: Could not add Report.\",\r\n                    type: \"error\"\r\n                });\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};","import React from 'react';\r\nimport \"../PostForm/PostForm.css\";\r\nimport \"../Comment/Comment.css\";\r\nimport {deleteReport} from \"../../actions/reports\"\r\n\r\n// import { Link } from 'react-router-dom';\r\n\r\nclass OneReport extends React.Component {\r\n    /*  Common 'Lifecycle' methods \r\n        - constructor\r\n        - componentDidMount\r\n        - componentWillUnmount\r\n    */\r\n\r\n    constructor(props) { // When the componenet is created\r\n        super(props)\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n    const { report } = this.props\r\n\r\n        return (\r\n\r\n        <li>\r\n            {/*Our post div*/}\r\n            <div class=\"commentMain\" >\t\r\n                <div class=\"commenterName\">{report.reporterName}</div>\r\n                <div class=\"commentContent\">{report.complaint} </div>\r\n                <div class=\"commentDate report\">Post Number: {report.postNumber}</div>\r\n                {/* If you want a delete report button o.w we can remove it */}\r\n                <div class=\"buttonSection\">\r\n                    <button class=\"generalButton\" onClick={\r\n                        () => {deleteReport(report._id)}\r\n                        }>Retire Report\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OneReport;\r\n","import React, { Component } from \"react\";\r\nimport \"../Login/Login.css\";\r\nimport { uid } from 'react-uid';\r\nimport UserRow from '../UserRow/UserRow';\r\nimport Header from '../Header/Header';\r\nimport logo from '../../logo.png';\r\nimport OneReport from '../OneReport/OneReport'\r\nimport { Link } from 'react-router-dom';\r\nimport '../Home/Home.css';\r\nimport '../Header/Header.css';\r\nimport './UserTable.css';\r\nimport '../Comment/Comment.css';\r\nimport { getState } from \"statezero\";\r\nimport {getUsers} from \"../../actions/user\"\r\nimport {getReports} from \"../../actions/reports\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n\r\nexport default class UserTable extends BaseReactComponent {\r\n\tfilterState({users, reports}){\r\n        return {users, reports};\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\t const {users, reports} = this.state\r\n\t\t getUsers()\r\n\r\n\t\tif (getState(\"adminLoggedIn\")) {\r\n\t\t\tgetReports()\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{ /* Header component with text props. */}\r\n\t\t\t\t\t<div class=\"mainBanner\">\r\n\t\t\t\t\t\t<img class=\"logo\" alt={logo} src={logo} />\r\n\t\t\t\t\t\t<text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{ /* Sub header component for user informaton. */}\r\n\t\t\t\t\t<div class=\"subBannerLeft\">\r\n\t\t\t\t\t\t<h3 class=\"subBannerLabel\"><text class=\"bannerText\">User Information</text></h3>\r\n\t\t\t\t\t\t<Link to={{ pathname: './', state: { posts: this.props.posts } }}>\r\n\t\t\t\t\t\t\t{ /* This element will link the URL path to home page */}\r\n\t\t\t\t\t\t\t<button class=\"subBannerButton\">\r\n\t\t\t\t\t\t\t\tGo Back\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{/* TODO: THIS SECTION SHOULD ONLY BE SEEN BY ADMINS */}\r\n\t\t\t\t\t{ /* Sub header component for reports (only for admin). */}\r\n\t\t\t\t\t<div class=\"subBannerRight\">\r\n\t\t\t\t\t\t<h3 class=\"subBannerLabel\"><text class=\"bannerText\">User Complaints &amp; Reports</text></h3>\r\n\t\t\t\t\t\t<Link to={{ pathname: './', state: { posts: this.props.posts } }}>\r\n\t\t\t\t\t\t\t<button class=\"subBannerButton invisible\">\r\n\t\t\t\t\t\t\t\tGo Back\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"halfSection\">\r\n\t\t\t\t\t\t{/* The user table to display each user's information. */}\r\n\t\t\t\t\t\t<section>\r\n\t\t\t\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t<tr class=\"header\">\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Username</div></th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Location</div></th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Help Ratio</div></th>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t{users.map((row) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<UserRow row={row} />\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</section>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"halfSection\">\r\n\t\t\t\t\t\t{/* Our report section only the admin can see. \r\n\t\t\t\t\t\t\tIf you want to make it invisible, rather than copy pasting you can \r\n\t\t\t\t\t\t\tchange the class to class=\"halfSection invisible\" and\r\n\t\t\t\t\t\t\tclass=\"subBannerRight invisible\" up at line 39 to hide both the header and content\t\r\n\t\t\t\t\t\t*/}\r\n\t\t\t\t\t\t{/* NOTE: reports are just comments with values changed:\r\n\t\t\t\t\t\t\tcommenterName: reporterName\r\n\t\t\t\t\t\t\tcommentDate: postNumber\r\n\t\t\t\t\t\t\tcommentContent: actual complain.\r\n\t\r\n\t\t\t\t\t\t\tI copied this from CommentList.js and Comment.js since there is\r\n\t\t\t\t\t\t\tno logic for holding reports in there yet but I think a simple if\r\n\t\t\t\t\t\t\tcondition will suffice. - Zuhab\r\n\t\t\t\t\t\t*/}\r\n\t\t\t\t\t\t<ul class=\"commentSection\">\r\n\t\t\t\t\t\t\t{reports.map((report) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<OneReport key={uid(report) /* unique id required to help React render more efficiently when we delete students. */}\r\n\t\t\t\t\t\t\t\t\t\treport={report}\r\n\t\t\t\t\t\t\t\t\t\tremoveReport={this.removeReport}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{ /* Header component with text props. */}\r\n\t\t\t\t\t<div class=\"mainBanner\">\r\n\t\t\t\t\t\t<img class=\"logo\" alt={logo} src={logo} />\r\n\t\t\t\t\t\t<text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{ /* Sub header component for user informaton. */}\r\n\t\t\t\t\t<div class=\"subBannerFull\">\r\n\t\t\t\t\t\t<h3 class=\"subBannerLabel\"><text class=\"bannerText\">User Information</text></h3>\r\n\t\t\t\t\t\t<Link to={{ pathname: './', state: { posts: this.props.posts } }}>\r\n\t\t\t\t\t\t\t{ /* This element will link the URL path to home page */}\r\n\t\t\t\t\t\t\t<button class=\"subBannerButton\">\r\n\t\t\t\t\t\t\t\tGo Back\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t\t<div class=\"halfSection\">\r\n\t\t\t\t\t\t{/* The user table to display each user's information. */}\r\n\t\t\t\t\t\t<section>\r\n\t\t\t\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t<tr class=\"header\">\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Username</div></th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Location</div></th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th><div>Help Ratio</div></th>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t<tbody>\r\n\r\n\t\t\t\t\t\t\t\t\t\t{users.map((row) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<UserRow row={row} />\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</section>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { getState, setState } from \"statezero\";\r\n\r\n// A function to send a GET request to the web server,\r\n//  and then loop through them and add a list element for each student.\r\nexport const getReports = () => {\r\n    // the URL for the request\r\n    const url = \"/reports\";\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    fetch(url)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not get students\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            setState(\"reports\", json.reports);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const updateCommentForm = field => {\r\n    const { name, value } = field;\r\n    setState(`commentForm.${name}`, value);\r\n};\r\n\r\n\r\nexport const deleteComment = (postID, commentID) => {\r\n    // the URL for the request\r\n    const url = \"/posts/\".concat(postID).concat('/').concat(commentID);\r\n\r\n    // Since this is a GET request, simply call fetch on the URL\r\n    // Same thing, change http method\r\n    fetch(url, {method: \"delete\"})\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                // return a promise that resolves with the JSON body\r\n                return res.json();\r\n            } else {\r\n                alert(\"Could not delete comment\");\r\n            }\r\n        })\r\n        .then(json => {\r\n            // the resolved promise with the JSON body\r\n            console.log(\"after comment delete:\", json)\r\n            setState(\"posts\", json.posts);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nexport const addComment = (postID) => {\r\n    // the URL for the request\r\n    const url = '/posts/'.concat(postID);\r\n\r\n    // The data we are going to send in our request\r\n    const comment = getState(\"commentForm\");\r\n\r\n    // Create our request constructor with all the parameters we need\r\n    const request = new Request(url, {\r\n        method: \"post\",\r\n        body: JSON.stringify(comment),\r\n        headers: {\r\n            Accept: \"application/json, text/plain, */*\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    // Send the request with fetch()\r\n    fetch(request)\r\n        .then(function(res) {\r\n            // Handle response we get from the API.\r\n            // Usually check the error codes to see what happened.\r\n            setState(\"commentForm\", { posterName: \"\", comment: \"\", date: \"\"});\r\n            if (res.status === 200) {\r\n                // If student was added successfully, tell the user.\r\n                setState(\"message\", {\r\n                    body: \"Success: Added a Comment.\",\r\n                    type: \"success\"\r\n                });\r\n            } else {\r\n                // If server couldn't add the student, tell the user.\r\n                // Here we are adding a generic message, but you could be more specific in your app.\r\n                setState(\"message\", {\r\n                    body: \"Error: Could not add Comment.\",\r\n                    type: \"error\"\r\n                });\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};","import React from 'react';\r\nimport \"../PostForm/PostForm.css\";\r\nimport \"./Comment.css\";\r\nimport { getState } from \"statezero\";\r\nimport {deleteComment} from \"../../actions/comments\"\r\nimport { get } from 'https';\r\n\r\nclass Comment extends React.Component {\r\n    /*  Common 'Lifecycle' methods \r\n        - constructor\r\n        - componentDidMount\r\n        - componentWillUnmount\r\n    */\r\n\r\n    constructor(props) { // When the componenet is created\r\n        super(props)\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { comment, postID, removeComment, adminLoggedIn } = this.props\r\n\r\n        if (getState(\"adminLoggedIn\")) {\r\n            return (\r\n                <li>\r\n                    {/*Our comment div*/}\r\n                    <div class=\"commentMain\" >\r\n                        {/* Information about each comment */}\r\n                        <div class=\"commenterName\">{comment.posterName}</div>\r\n                        <div class=\"commentContent\">{comment.comment}</div>\r\n                        <div class=\"commentDate\">Posted date: {comment.date}</div>\r\n                        <div class=\"buttonSection\">\r\n                            <button class=\"generalButton\" onClick={\r\n                                () => {deleteComment(postID, comment._id)}\r\n                            }>Delete\r\n                  </button>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            )\r\n        } else {\r\n            return (\r\n                <li>\r\n                    {/*Our comment div*/}\r\n                    <div class=\"commentMain\" >\r\n                        {/* Information about each comment */}\r\n                        <div class=\"commenterName\">{comment.posterName}</div>\r\n                        <div class=\"commentContent\">{comment.comment}</div>\r\n                        <div class=\"commentDate\">Posted date: {comment.date}</div>\r\n                    </div>\r\n                </li>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Comment;","import React from 'react';\r\nimport { uid } from 'react-uid';\r\nimport \"./CommentList.css\";\r\nimport Comment from '../Comment/Comment'\r\nimport { Link } from 'react-router-dom';\r\nimport \"../Home/Home.css\";\r\nimport \"../Comment/Comment.css\";\r\n\r\n// New code\r\nimport {getPosts} from \"../../actions/posts\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n/* Component for the List of Comments */\r\nclass CommentList extends BaseReactComponent{\r\n    filterState({posts}){\r\n        return {posts};\r\n    } \r\n    \r\n    render() {\r\n        const { comments, removeComment, post, adminLoggedIn } = this.props\r\n\r\n    // New code\r\n    const {posts} = this.state\r\n\r\n    // Get our posts from the server\r\n    getPosts()\r\n\r\n        return (\r\n            <div>\r\n                { /* Sub header component for comments. */}\r\n                <div class=\"subBannerFull\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">{post.postTitle}</text></h3>\r\n                    {/* BACK BUTTON */}\r\n                    <Link to={{ pathname: './' }}>\r\n                        <button class=\"subBannerButton\">\r\n                            Back\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                {/* OUR Comments */}\r\n                <div class=\"posterComment\">\r\n                    {/* Header for the comments */}\r\n                    <div class=\"postDifficulty\">{post.postDifficulty} / 5</div>\r\n                    {/* Content of the comments */}\r\n                    <div class=\"postContent\">\r\n                        {post.jobDescription}\r\n                    </div>\r\n                    {/* Information of the commenter/comment. */}\r\n                    <ul class=\"postInfoList\">\r\n                        <li class=\"postInfoItem\">{post.posterName}</li>\r\n                        <li class=\"postInfoItem\">{post.posterLocation}</li>\r\n                        <li class=\"postInfoItem\">{post.taskDate}</li>\r\n                    </ul>\r\n\r\n                    {/* our add comment feature */}\r\n                    <div class=\"buttonSection\">\r\n                        <Link to={{ pathname: './AddComment', state: { comments: this.props.comments, post: this.props.post,  postID: this.props.postID  } }}>\r\n                            <button class=\"generalButton\">\r\n                                Add Comment\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n                {/* OUR COMMENT UL */}\r\n                <div>\r\n                    <ul class=\"commentSection\">\r\n                        {comments.map((comment) => {\r\n                            return (\r\n                                <Comment key={uid(comment) /* unique id required to help React render more efficiently when we delete students. */}\r\n                                    comment={comment}\r\n                                    postID={post._id}\r\n                                    removeComment={removeComment}\r\n                                    adminLoggedIn={adminLoggedIn}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentList;","import React, { Component } from \"react\";\r\nimport \"../Login/Login.css\";\r\nimport \"../Home/Home.css\";\r\nimport Header from '../Header/Header';\r\nimport logo from '../../logo.png';\r\nimport CommentList from '../CommentList/CommentList';\r\n\r\n// New code\r\nimport {getPosts} from \"../../actions/posts\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n\r\nexport default class Comments extends BaseReactComponent {\r\n    // SERVER DATA NEEDED:\r\n    // Get comments for a particular post from the server\r\n    // Code below requires a call to server to get all the comments\r\n    // Removes a comment and updates the server\r\n    filterState({posts}){\r\n        return {posts};\r\n    }\r\n\r\n    getPostComments(posts, postID){\r\n        for (let i = 0; i < posts.length; i++) {\r\n            if (posts[i]._id == postID) {\r\n                return posts[i].comments\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // New code\r\n        const {posts} = this.state\r\n        const postID = this.props.location.state.postID\r\n\r\n        console.log(\"Comments:\", postID)\r\n        // Get our posts from the server\r\n        getPosts()\r\n        console.log(posts)\r\n        const comments = this.getPostComments(posts, postID)\r\n        console.log(comments)\r\n\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                { /* Header component with text props. */}\r\n                <div class=\"mainBanner\">\r\n                    <img class=\"logo\" alt={logo} src={logo} />\r\n                    <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                </div>\r\n\r\n                {/* Our comment list */}\r\n                <CommentList comments={comments}\r\n                    removeComment={this.removeComment}\r\n                    post={this.props.location.state.post}\r\n                    postID={this.props.location.state.postID}\r\n                    adminLoggedIn={this.props.location.state.adminLoggedIn}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"../PostForm/PostForm.css\";\r\n\r\nimport {addComment, updateCommentForm} from \"../../actions/comments\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n/* Component for the Comment Form */\r\nclass CommentForm extends BaseReactComponent {\r\n\r\n    filterState({ commentForm}) {\r\n        return { commentForm };\r\n    }\r\n\r\n    render() {\r\n        const { commentForm } = this.state;\r\n\r\n        const { posterName, comment, date } = commentForm;\r\n\r\n        return (\r\n            <div>\r\n\r\n                { /* Inputs to add a comment */}\r\n                <input class=\"inputTextBox\"\r\n                    name='posterName'\r\n                    value={posterName}\r\n                    onChange={e => updateCommentForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='comment'\r\n                    value={comment}\r\n                    onChange={e => updateCommentForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Comment\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='date'\r\n                    value={date}\r\n                    onChange={e => updateCommentForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Date\" />\r\n\r\n                <Link to={{ pathname: './Comments', state: { comments: this.props.comments, post: this.props.post,  postID: this.props.postID} }}>\r\n                    <button class=\"submitButton add\" onClick={() => {addComment(this.props.postID)}}>\r\n                        Submit Comment\r\n\t                </button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentForm;\r\n\r\n","/*  Full Queue component */\r\n// Everything here was previously in the App component.\r\nimport React from 'react';\r\n\r\n// Importing components\r\nimport Header from '../Header/Header';\r\nimport CommentForm from '../CommentForm/CommentForm'\r\nimport { Link } from 'react-router-dom';\r\nimport \"../Home/Home.css\";\r\nimport logo from '../../logo.png';\r\n\r\nclass AddComment extends React.Component {\r\n\r\n    // Each section of the Queue now has its own componenet, cleaning up the\r\n    // JSX a lot.\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                { /* Header component with text props. */}\r\n                <div class=\"mainBanner\">\r\n                    <img class=\"logo\" alt={logo} src={logo} />\r\n                    <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                </div>\r\n\r\n                { /* Sub header component for posts. */}\r\n                <div id=\"addAPost\" class=\"subBannerLeft\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Add a Comment</text></h3>\r\n                    <Link to={{\r\n                        pathname: './Comments', state: {\r\n                            comments: this.props.location.state.comments, post: this.props.location.state.post, postID: this.props.location.state.postID\r\n                        }\r\n                    }}>\r\n                        { /* This element will link the URL path to home page */}\r\n                        <button class=\"subBannerButton\">\r\n                            Go Back\r\n            </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                { /* Form to input comment information. */}\r\n                <CommentForm\r\n                    comments={this.props.location.state.comments}\r\n                    postID={this.props.location.state.postID}\r\n                    post={this.props.location.state.post}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddComment;\r\n","import React from 'react';\r\nimport \"../PostForm/PostForm.css\";\r\n// import { Link } from 'react-router-dom';\r\n\r\nclass YourPost extends React.Component {\r\n    /*  Common 'Lifecycle' methods \r\n        - constructor\r\n        - componentDidMount\r\n        - componentWillUnmount\r\n    */\r\n\r\n    constructor(props) { // When the componenet is created\r\n        super(props)\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { post } = this.props\r\n\r\n        return (\r\n            <li>\r\n                {/*Our post div*/}\r\n                <div class=\"postMain\" >\r\n                    {/* Header for the post */}\r\n                    <div class=\"postTitle\">{post.postTitle}</div>\r\n                    <div class=\"postDifficulty\">{post.postDifficulty} / 5</div>\r\n                    {/* Content of the post */}\r\n                    <div class=\"postContent\">\r\n                        {post.jobDescription}\r\n                    </div>\r\n                    {/* Information of the poster/post. */}\r\n                    <ul class=\"postInfoList\">\r\n                        <li class=\"postInfoItem\">{post.posterName}</li>\r\n                        <li class=\"postInfoItem\">{post.posterLocation}</li>\r\n                        <li class=\"postInfoItem\">{post.taskDate}</li>\r\n                    </ul>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default YourPost;\r\n","import React from 'react';\r\nimport { uid } from 'react-uid';\r\nimport \"../PostForm/PostForm.css\";\r\nimport YourPost from '../YourPost/YourPost'\r\n\r\n/* Component for the List of Students */\r\nclass YourPostList extends React.Component {\r\n    render() {\r\n        let { posts } = this.props\r\n\r\n        /* Our student list.  We use the state to iterate through the \r\n           student list and make an <li> for each one. */\r\n        return (\r\n            <ul class=\"postList\">\r\n                {/* .MAP creates as problem as it generates a new post array, so our original post array will never be edited */}\r\n                {posts.map((post) => {\r\n                    return (\r\n                        <YourPost key={uid(post) /* unique id required to help React render more efficiently when we delete students. */}\r\n                            post={post}\r\n                        />\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YourPostList;","import React from 'react';\r\nimport \"../PostForm/PostForm.css\";\r\nimport logo from '../../logo.png';\r\nimport { Link } from 'react-router-dom';\r\nimport \"../Home/Home.css\";\r\nimport Header from '../Header/Header';\r\nimport YourPostList from '../YourPostList/YourPostList';\r\nimport \"./Profile.css\";\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\nimport { getState } from \"statezero\";\r\n\r\n\r\nclass UserInformation extends BaseReactComponent{\r\n    /*  Common 'Lifecycle' methods \r\n        - constructor\r\n        - componentDidMount\r\n        - componentWillUnmount\r\n    */\r\n\r\n    constructor(props) { // When the componenet is created\r\n        super(props)\r\n    }\r\n\r\n    filterState({currentUser, posts}){\r\n        return {currentUser, posts};\r\n\t}\r\n\r\n    render() {\r\n        const {currentUser, posts} = this.state\r\n        console.log(posts)\r\n        let userPosts = []\r\n        let adminStatus = ''\r\n\r\n        if (getState(\"someoneLoggedIn\")) {\r\n            for (let j = 0; j < posts.length; j++) {\r\n                if (posts[j].posterName === currentUser.name) {\r\n                    userPosts.push(posts[j])\r\n                }\r\n            }\r\n\r\n            if (currentUser.isAdmin === true) {\r\n                adminStatus = '(Website Admin)'\r\n            }\r\n\r\n            return (\r\n\r\n                <div className=\"App\">\r\n\r\n                    { /* Header component with text props. */}\r\n                    <div class=\"mainBanner\">\r\n                        <img class=\"logo\" alt={logo} src={logo} />\r\n                        <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                    </div>\r\n\r\n                    { /* Sub header component for posts. */}\r\n                    <div class=\"subBannerLeft\">\r\n                        <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Your Posts</text></h3>\r\n                        <Link to={{ pathname: './' }}>\r\n                            { /* This element will link the URL path to home page */}\r\n                            <button class=\"subBannerButton\" >\r\n                                Go Back\r\n                    </button>\r\n                        </Link>\r\n                    </div>\r\n\r\n                    { /* Sub header component for filtering. */}\r\n                    <div class=\"subBannerRight\">\r\n                        <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Profile</text></h3>\r\n                        <Link to={{ pathname: './' }}>\r\n                            { /* This element will link the URL path to home page */}\r\n                            <button class=\"subBannerButton invisible\" >\r\n                                Report\r\n                    </button>\r\n                        </Link>\r\n                    </div>\r\n                    { /* The Post List */}\r\n                    {/* <PostList posts={this.props.ourState.posts}\r\n            removePost={this.removePost}\r\n            adminLoggedIn = {this.props.ourState.adminLoggedIn}\r\n        /> */}\r\n                    <div class=\"halfSection\">\r\n\r\n                        <YourPostList posts={userPosts}\r\n                        />\r\n\r\n                    </div>\r\n                    <div class=\"halfSection\">\r\n                        <div class=\"profile\">\r\n                            {/*Our post div*/}\r\n                            <img alt={logo} src={logo} />\r\n                            <div class=\"name\">{currentUser.name} (<span class=\"username\">{currentUser.userName}</span>)</div>\r\n                            <div class=\"userInfoItem\">Has helped: <span class=\"givingHelp\">{currentUser.helped}</span> person(s)</div>\r\n                            <div class=\"userInfoItem\">Was helped by: <span class=\"gettingHelp\">{currentUser.gottenHelped}</span> person(s)</div>\r\n                            <div class=\"userInfoItem\">Help ratio: <span class=\"helpRatio\"><span class=\"helping\">{currentUser.helped / currentUser.gottenHelped}</span>:<span class=\"helped\">1</span></span> person(s)</div>\r\n                            <div class=\"userInfoItem\">Phone #: <span class=\"phoneNumber\">{currentUser.phone}</span> </div>\r\n                            <div class=\"userInfoItem\"><span class=\"phoneNumber\">{adminStatus}</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    //}\r\n    {/* IF NO ONE IS LOGGED IN, WE END UP HERE */ }\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            { /* Header component with text props. */}\r\n            <div class=\"mainBanner\">\r\n                <img class=\"logo\" alt={logo} src={logo} />\r\n                <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n            </div>\r\n\r\n            { /* Sub header component for posts. */}\r\n            <div class=\"subBannerFull\">\r\n                <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Not yet signed in.</text></h3>\r\n                <Link to={{ pathname: './' }}>\r\n                    { /* This element will link the URL path to home page */}\r\n                    <button class=\"subBannerButton\" >\r\n                        Go Back\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n            <div class=\"noUserMessage\">Please go back to the main page and log in.</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserInformation;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"../PostForm/PostForm.css\";\r\n\r\nimport {addReport, updateReportForm} from \"../../actions/reports\"\r\nimport BaseReactComponent from \"../BaseReactComponent/index.js\";\r\n\r\n\r\n/* Component for the Student Form */\r\nclass ReportForm extends BaseReactComponent {\r\n    filterState({ reportForm}) {\r\n        return { reportForm };\r\n    }\r\n\r\n    render() {\r\n\r\n        const { reportForm } = this.state;\r\n\r\n        const { reporterName, postNumber, complaint } = reportForm;\r\n\r\n        return (\r\n            <div>\r\n                { /* Inputs to add student */}\r\n                <input class=\"inputTextBox\"\r\n                    name='reporterName'\r\n                    value={reporterName}\r\n                    onChange={e => updateReportForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\" />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='postNumber'\r\n                    value={postNumber}\r\n                    onChange={e => updateReportForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder={this.props.postNumber} />\r\n\r\n                <input class=\"inputTextBox\"\r\n                    name='complaint'\r\n                    value={complaint}\r\n                    onChange={e => updateReportForm(e.target)}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter a complaint\" />\r\n\r\n                <Link to={{ pathname: './' }}>\r\n                    <button class=\"submitButton add\" onClick={addReport}>\r\n                        Submit Report\r\n\t                </button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReportForm;\r\n\r\n","/*  Full Queue component */\r\n// Everything here was previously in the App component.\r\nimport React from 'react';\r\n\r\n// Importing components\r\nimport Header from '../Header/Header';\r\nimport ReportForm from '../ReportForm/ReportForm'\r\nimport { Link } from 'react-router-dom';\r\nimport \"../Home/Home.css\";\r\nimport logo from '../../logo.png';\r\n\r\nconst log = console.log\r\n\r\nclass Report extends React.Component {\r\n\r\n    ///  React 'state'.  \r\n    // Allows us to keep track of changing data in this component.\r\n    // Each section of the Queue now has its own componenet, cleaning up the\r\n    // JSX a lot.\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                { /* Header component with text props. */}\r\n                <div class=\"mainBanner\">\r\n                    <img class=\"logo\" alt={logo} src={logo} />\r\n                    <text class=\"bannerText\"><Header title=\"Neighbourly\" /></text>\r\n                </div>\r\n\r\n                { /* Sub header component for posts. */}\r\n                <div id=\"addAPost\" class=\"subBannerLeft\">\r\n                    <h3 class=\"subBannerLabel\"><text class=\"bannerText\">Report a post</text></h3>\r\n                    <Link to={{ pathname: './'}}>\r\n                        { /* This element will link the URL path to home page */}\r\n                        <button class=\"subBannerButton\">\r\n                            Go Back\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                { /* Header component with text props. */}\r\n                {/* <Header title=\"Neighbourly\"\r\n                subtitle=\"Add Post\"/> */}\r\n\r\n                <ReportForm\r\n                    postNumber={this.props.location.state.postNum}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Report;\r\n","/* New cleaned up version of App.js */\r\nimport React from 'react';\r\n\r\n// Importing react-router-dom to use the React Router\r\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n// Importing the Queue and our simple Home Page\r\nimport Home from './react-components/Home/Home';\r\nimport AddPost from './react-components/AddPost/AddPost';\r\nimport UserTable from './react-components/UserTable/UserTable';\r\nimport Comments from './react-components/Comments/Comments';\r\nimport AddComment from './react-components/AddComment/AddComment';\r\nimport UserInformation from './react-components/UserInformation/UserInformation'\r\nimport Report from './react-components/Report/Report'\r\nimport { readCookie } from \"./actions/user\";\r\nimport BaseReactComponent from './react-components/BaseReactComponent';\r\n\r\nclass App extends BaseReactComponent {\r\n\r\n    // MOCK / HARDCODED DATA\r\n\r\n    filterState({ currentUser }) {\r\n        return { currentUser };\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        readCookie();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch> { /* Similar to a switch statement - shows the component depending on the URL path */}\r\n                        { /* Each Route below shows a different component depending on the exact path in the URL  */}\r\n                        <Route exact path='/' render={() => (\r\n                            <Home\r\n                            />)\r\n                        } />\r\n                        <Route exact path='/AddPost' component={AddPost} />\r\n                        <Route exact path='/UserTable' component={UserTable} />\r\n                        <Route exact path='/Comments' component={Comments} />\r\n                        <Route exact path='/AddComment' component={AddComment} />\r\n                        <Route exact path='/UserInformation' component={UserInformation} />\r\n                        <Route exact path='/Report' component={Report} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { setState } from \"statezero\";\r\n\r\n// Initialize all state paths used by your app as empty.\r\n// These are the states that you can filter using filterState()\r\n// as needed by specific components. All component classes that read\r\n// from these state paths must extend BaseReactComponent class.\r\n//\r\n// - currentUser state path is used by the root App component\r\n// - studentForm and message state paths are used by the StudentForm component\r\n// - studentList state path is used by the StudentList component\r\nexport const setEmptyState = () => {\r\n    setState(\"adminLoggedIn\", false)\r\n    setState(\"someoneLoggedIn\", false)\r\n    setState(\"currentUser\", null);\r\n    setState(\"disabled\", false)\r\n    setState(\"loginForm\", { username: \"\", password: \"\" });\r\n    setState(\"signupForm\", {name: \"\", userName: \"\", password: \"\", confirmPassword: \"\", location: \"\", phone: \"\"})\r\n    setState(\"postForm\", { posterName: \"\", posterLocation: \"\", postTitle: \"\", postDifficulty: \"\", taskDate: \"\", jobDescription: \"\" });\r\n    setState(\"reportForm\", { reporterName: \"\", postNumber: \"\", complaint: \"\"});\r\n    setState(\"commentForm\", { posterName: \"\", comment: \"\", date: \"\"});\r\n    setState(\"posts\", []);\r\n    setState(\"reports\", []);\r\n    setState(\"users\", [])\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { setEmptyState } from './actions/helpers';\n\nsetEmptyState();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}